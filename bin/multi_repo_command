#!/bin/bash

# Color definitions
RED='\033[0;31m'
BLUE='\033[0;34m'
WHITE='\033[1;37m'
PURPLE='\033[0;32m'
YELLOW='\033[0;33m'
ORANGE='\033[0;33m'

# Print functions
print_error() {
    echo -e "${RED}$1${WHITE}"
}

print_info() {
    echo -e "${ORANGE}$1${WHITE}"
}

print_working_branch() {
    echo -e "${PURPLE}$1${WHITE}"
}

# Set all repository paths
set_all_repos_path() {
    if [ -z "$all_repos_path" ]; then
        all_repos_path=($(find . -type d -name ".git" -exec dirname {} \;))
        echo "${all_repos_path[@]}" > ~/.all_repos_path_cache
    else
        [ -f ~/.all_repos_path_cache ] && readarray -t all_repos_path < ~/.all_repos_path_cache
    fi
}

# Push changes to repositories
repos_push() {
    set_all_repos_path
    choosed_branch=${1:-$(similar_branch_fzf)}
    for git_dir in "${all_repos_path[@]}"; do
        (
            print_working_branch "Working on $git_dir"
            cd "$git_dir" && git push --set-upstream origin "$choosed_branch"
        ) &
    done  
    wait
}

# Commit changes in repositories
repos_commit() {
    options=("feat" "fix" "custom" "build" "chore" "ci" "docs" "style" "refactor" "perf" "test")
    selected_option=$(printf '%s\n' "${options[@]}" | fzf)
    read -p "Enter context (e.g. subscription, press Enter to skip): " context
    read -p "Message: " commit_message

    set_all_repos_path
    for git_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $git_dir"
        cd "$git_dir"
        git commit -m "${selected_option}${context:+($context)}: $commit_message"
        cd - > /dev/null
    done
}

# Get similar branches
similar_branch_fzf() {
    cache_file=~/.similar_branches_cache
    if [ -f "$cache_file" ] && [ $(( $(date +%s) - $(stat -c %Y "$cache_file") )) -lt 3600 ]; then
        cat "$cache_file" | fzf
    else
        curre_repo_branches=$(git branch | sed 's/*//g' | xargs)
        similar_branches_file=$(mktemp)
        set_all_repos_path
        for git_dir in "${all_repos_path[@]}"; do
            repo_dir=$(dirname "$git_dir")
            cd "$repo_dir"
            other_repo_branches=$(git branch | sed 's/*//g' | xargs)
            comm -12 <(echo "$curre_repo_branches" | sort) <(echo "$other_repo_branches" | sort) >> "$similar_branches_file"
            cd - > /dev/null
        done
        sort "$similar_branches_file" | uniq > "$cache_file"
        cat "$cache_file" | fzf
        rm "$similar_branches_file"
    fi
}

# Create a new ticket branch
ticket_start() {
    print_info "What type of branch do you want to create?"
    options=("feature" "bugfix" "hotfix" "release" "support" "custom")
    read -p "Enter the name of the ticket: " ticket_name
    selected_option=$(printf '%s\n' "${options[@]}" | fzf)

    set_all_repos_path
    for git_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $git_dir"
        cd "$git_dir"
        if ! git status; then
            print_error "You have uncommitted changes in $git_dir"
            return
        fi
        print_info "Creating branch $selected_option/$ticket_name in $git_dir"
        git fetch
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        git checkout "$default_branch" && git pull
        git checkout -b "$selected_option/$ticket_name"
        cd - > /dev/null
    done
}

# Check out a ticket branch
ticket_check() {
    choosed_branch=$(similar_branch_fzf)
    if [ -z "$choosed_branch" ]; then
        print_error "No branch selected"
        return
    fi
    set_all_repos_path
    for git_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $git_dir"
        cd "$git_dir" && git checkout "$choosed_branch" && git pull
        cd - > /dev/null
    done
}

# Open a pull request for changes
repos_open_pull_request_on_change_branch() {
    set_all_repos_path
    choosed_branch=${1:-$(similar_branch_fzf)}
    for git_dir in "${all_repos_path[@]}"; do
        cd "$git_dir"
        print_working_branch "Working on $git_dir"
        github_url=$(git remote get-url origin | sed -E 's/git@/https:\/\//; s/\.git$//; s/:/\//')
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        if git fetch origin "$default_branch" && git fetch origin "$choosed_branch" && [[ $(git diff "origin/$default_branch" "origin/$choosed_branch") ]]; then
            print_info "There is a diff between $default_branch and $choosed_branch"
            pr_url="$github_url/compare/${default_branch}...$choosed_branch"
            echo "Opening $pr_url"
            open "$pr_url"
        fi
        cd - > /dev/null
    done
}

# Return to the default branch
repos_go_to_default_branch() {
    set_all_repos_path
    for git_dir in "${all_repos_path[@]}"; do
        cd "$git_dir"
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        print_info "Switching to default branch $default_branch in $git_dir"
        git checkout "$default_branch"
        cd - > /dev/null
    done
}

# Delete a local branch
repos_delete_local_branch() {
    set_all_repos_path
    choosed_branch=${1:-$(similar_branch_fzf)}
    if [ -z "$choosed_branch" ]; then
        print_error "No branch selected"
        return
    fi
    if [[ "$choosed_branch" =~ ^(main|develop|master)$ ]]; then
        print_error "You can't delete the develop, master, or main branch"
        return
    fi
    for repo_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $repo_dir"
        cd "$repo_dir" && git branch -D "$choosed_branch"
        cd - > /dev/null
    done
}

# Finish a ticket
ticket_finish() {
    choosed_branch=$(similar_branch_fzf)
    if [ -z "$choosed_branch" ]; then
        print_error "No branch selected"
        return
    fi
    if [[ "$choosed_branch" =~ ^(develop|master|main)$ ]]; then
        print_error "You can't delete the develop, master, or main branch"
        return
    fi

    print_info "Branch of the ticket:"
    print_info "1. Commit all the changes"
    repos_commit
    print_info "2. Push the changes in all the repos"
    repos_push "$choosed_branch"
    print_info "3. Create a pull request in all the repos"
    repos_open_pull_request_on_change_branch "$choosed_branch"
    print_info "4. Go to default branch"
    repos_go_to_default_branch
    print_info "5. Delete local branch"
    repos_delete_local_branch "$choosed_branch"
}

# Fetch all remote branches locally
repos_get_all_remote_branch_locally() {
    set_all_repos_path
    for git_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $git_dir"
        cd "$git_dir"
        git fetch --all
        git branch -r | grep -v '\->' | while read -r remote; do
            git branch --track "${remote#origin/}" "$remote"
        done
        git pull --all
        cd - > /dev/null
    done
}

# Action selection and execution
actions() {
    option_actions=(
        "status=git status"
        "fetch=git fetch"
        "fetch_all=git fetch --all"
        "custom=custom"
        "push=git push"
        "pull=git pull"
        "delete_branch=git branch -d"
        "checkout=git checkout"
    )

    selected_key=$(printf '%s\n' "${option_actions[@]}" | cut -d= -f1 | fzf)
    selected_command=$(grep "^$selected_key=" <<< "${option_actions[*]}" | cut -d= -f2)

    if [[ "$selected_key" == "delete_branch" || "$selected_key" == "checkout" ]]; then
        choosed_branch=$(similar_branch_fzf)
        selected_command="$selected_command $choosed_branch"
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        if [ "$choosed_branch" == "$default_branch" ]; then
            print_error "You can't delete the develop or master branch"
            return
        fi
    fi

    if [ "$selected_key" == "custom" ]; then
        read -p "Enter the command you want to execute: " custom_command
        selected_command="$custom_command"
    fi

    read -p "The following command will be executed: $selected_command. Confirm? (y/n): " confirm
    for git_dir in "${all_repos_path[@]}"; do
        print_info "Executing command on ${YELLOW}$git_dir"
        cd "$git_dir" && eval "$selected_command" || print_error "Command failed in $git_dir"
        cd - > /dev/null
    done
}

# Execute selected function
get_all_functions_and_execute() {
    execute_function=$(declare -F | awk '{print $3}' | grep -v "private" | fzf)
    $execute_function
}

# Check if changes are merged into the default branch
repos_check_if_changes_merged() {
    set_all_repos_path
    for repo_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $repo_dir"
        cd "$repo_dir"
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        git checkout "$default_branch" && git pull
        git branch --no-merged
        cd - > /dev/null
    done
}

# Delete current local and remote branch
repos_delete_current_local_and_remote_branch() {
    set_all_repos_path
    choosed_branch=$(similar_branch_fzf)

    if [ -z "$choosed_branch" ]; then
        print_error "No branch selected"
        return
    fi

    if [[ "$choosed_branch" =~ ^(main)$ ]]; then
        print_error "You can't delete the develop, master, or main branch"
        return
    fi

    for repo_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $repo_dir"
        cd "$repo_dir"
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        print_info "Switching to default branch $default_branch in $git_dir"
        git checkout "$default_branch" && git pull
        git branch -D "$choosed_branch"
        git push origin --delete "$choosed_branch"
        cd - > /dev/null
    done
}

# Merge branch into default branch
repos_merge_branch_into_default_branch() {
    set_all_repos_path
    choosed_branch=$(similar_branch_fzf)
    if [ -z "$choosed_branch" ]; then
        print_error "No branch selected"
        return
    fi

    for git_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $git_dir"
        cd "$git_dir"
        default_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
        git checkout "$default_branch" && git pull
        git merge "$choosed_branch"
        cd - > /dev/null
    done
}

# Merge from specified branch to specified branch
repos_merge_from_specified_branch_to_specified_branch() {
    set_all_repos_path
    from_branch=$(similar_branch_fzf)
    to_branch=$(similar_branch_fzf)
    if [ -z "$from_branch" ] || [ -z "$to_branch" ]; then
        print_error "No branch selected"
        return
    fi

    for git_dir in "${all_repos_path[@]}"; do
        print_working_branch "Working on $git_dir"
        cd "$git_dir" || print_error "Error in $git_dir"
        git checkout "$to_branch" || print_error "Error in $git_dir"
        git pull || print_error "Error in $git_dir"
        git merge "$from_branch" || print_error "Error in $git_dir"
        cd - > /dev/null || print_error "Error in $git_dir"
    done
}

# Pull all branches
pull_all_branches() {
    set_all_repos_path
    for git_dir in "${all_repos_path[@]}"; do
        echo "Updating repository: $git_dir"
        cd "$git_dir" || continue
        git fetch --all
        remote_branches=$(git branch -r | grep -v '\->' | sed 's/origin\///')
        for branch in $remote_branches; do
            if ! git show-ref --verify --quiet "refs/heads/$branch"; then
                git branch --track "$branch" "origin/$branch"
            fi
        done
        for branch in $remote_branches; do
            echo "Updating branch: $branch"
            git checkout "$branch" && git pull origin "$branch"
        done
        git checkout -
        echo "Finished updating $git_dir"
        echo "-----------------------------"
        cd - > /dev/null
    done
}

# Execute the selected function
get_all_functions_and_execute
