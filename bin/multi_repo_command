# !/bin/bash

RED='\033[0;31m'
BLUE='\033[0;34m'
WHITE='\033[1;37m'
PURPLE='\033[0;32m'
YELLOW='\033[0;33m'
ORANGE='\033[0;33m'

print_error_color_exclude() {
    echo  "${RED}$1${WHITE}"
}

print_info_color_exclude() {
    echo  "${ORANGE}$1${WHITE}"
}

print_working_branch_exclude() {
    echo  "${PURPLE}$1${WHITE}"
}

set_all_repos_path_exclude() {
    all_repos_path=$(find . -type d -name ".git" | sed 's/\/.git//g')
    # Convert the space-separated string into an array
    IFS=$'\n' read -rd '' -a all_repos_path <<< "$all_repos_path"
}

similar_branch_fzf_exclude() {
    # Get branches of the current repository
    curre_repo_branches=$(git branch | sed 's/*//g' | sed 's/ //g')
    
    # Temporary file to collect all similar branches across repositories
    similar_branches_file=$(mktemp)
    
    set_all_repos_path_exclude
    # Iterate over all found .git directories
    for git_dir in "${all_repos_path[@]}"; do
        # Move to the repository directory
        repo_dir=$(dirname "$git_dir")
        cd "$repo_dir"
        
        # Get branches of the other repository
        other_repo_branches=$(git branch | sed 's/*//g' | sed 's/ //g')
        
        # Use temporary files to store sorted branch names
        curre_repo_branches_sorted=$(mktemp)
        other_repo_branches_sorted=$(mktemp)

        echo "$curre_repo_branches" | sort > "$curre_repo_branches_sorted"
        echo "$other_repo_branches" | sort > "$other_repo_branches_sorted"

        # Get the similar branches between the two repositories
        comm -12 "$curre_repo_branches_sorted" "$other_repo_branches_sorted" >> "$similar_branches_file"

        # Clean up temporary files
        rm "$curre_repo_branches_sorted" "$other_repo_branches_sorted"
        
        # Return to the previous directory
        cd - > /dev/null
    done

    # Pipe the collected similar branches into fzf for interactive selection
    cat "$similar_branches_file" | sort | uniq | fzf

    # Clean up the final temporary file
    rm "$similar_branches_file"
}

set_all_repos_path_exclude() {
    all_repos_path=$(find . -type d -name ".git" | sed 's/\/.git//g')
    # Convert the space-separated string into an array
    IFS=$'\n' read -rd '' -a all_repos_path <<< "$all_repos_path"
}

ticket_start() {
  print_info_color_exclude "What type of branch do you want to create?"
  options=("feature" "bugfix" "hotfix" "release" "support" "custom")
  read -p "Enter the name of the ticket: " ticket_name

  selected_option=$(printf '%s\n' "${options[@]}" | fzf)

  set_all_repos_path_exclude

  # Check every repo is committed before creating the branch
  set_all_repos_path_exclude
  for git_dir in "${all_repos_path[@]}"; do
    print_working_branch_exclude " work on $git_dir "
    cd $git_dir
    git status
    if [ $? -ne 0 ]; then
	 print_error_color_exclude "You have uncommitted changes in $git_dir"
	 return
    fi
    cd -
  done

  # Create the branch if it doesn't exist prefixed with the type + / into all git directories
  for git_dir in "${all_repos_path[@]}"; do
	# display the future branch name that will be created and the repo
    print_info_color_exclude "Creating branch $selected_option/$ticket_name in $git_dir"
    cd $git_dir
    git fetch
    default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)
    git checkout $default_branch
    git pull
    git checkout -b $selected_option/$ticket_name
    cd -
  done
}
 
ticket_check() {
  choosed_branch=$(similar_branch_fzf_exclude)
  if [ "$choosed_branch" == "" ]; then
    print_error_color_exclude "No branch selected"
    return
  fi
  set_all_repos_path_exclude
  for git_dir in "${all_repos_path[@]}"; do
    print_working_branch_exclude " work on $git_dir "
    cd $git_dir
    git checkout $choosed_branch
    git pull
    cd -
  done
}

ticket_finish(){
	choosed_branch=$(similar_branch_fzf_exclude)
	if [ "$choosed_branch" == "" ]; then
		print_error_color_exclude "No branch selected"
		return
	fi
	set_all_repos_path_exclude
	if [ "$choosed_branch" == "develop" ] || [ "$choosed_branch" == "master" ] || [ "$choosed_branch" == "main" ]; then
		print_error_color_exclude "You can't delete the develop or master branch"
		return
	fi

	print_info_color_exclude "\n  Branch of the ticket: "

	print_info_color_exclude "\n  1. Pushing the changes in all the repos\n "
	for git_dir in "${all_repos_path[@]}"; do
		read -p "Do you want to push the changes in $git_dir ? (y/n)" confirm
		if [ "$confirm" == "n" ]; then
			print_info_color_exclude "Skipping $git_dir"
			continue
		fi
		print_working_branch_exclude " work on $git_dir "
		cd $git_dir
		# if remote branch exists, fetch and pull
		print_info_color_exclude "\n  1.1 Fetching and pulling the changes if the branch exists remotely: $choosed_branch \n "
		if [ $(git branch -r | grep $choosed_branch ) ]; then
			git fetch
			git pull
		fi

		# otherwise if it exist locallly checkout to it
		if [ $(git branch -r | grep $choosed_branch ) ]; then
			git checkout $choosed_branch
		fi

		if [ $(git branch -r | grep $choosed_branch ) ]; then
			# set the upstream branch if it doesn't exist
			if [ $(git branch -vv | grep $choosed_branch | wc -l) -eq 0 ]; then
				git push --set-upstream origin $choosed_branch
			else
				git push
			fi
		fi
		cd -
	done

	print_info_color_exclude "\n  2. Create a pull request in all the repos\n "
	for git_dir in "${all_repos_path[@]}"; do
		print_working_branch_exclude " work on $git_dir "
		cd $git_dir
		git checkout develop
		git pull
		git checkout $choosed_branch
		print_info_color_exclude "\n  2.1 Creating a pull request if there is difference between develop and $choosed_branch"

		github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/'`;
		default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)
		if [ $(git diff $default_branch $choosed_branch) ]; then
			pr_url=$github_url"/compare/${default_branch}..."$choosed_branch
			open $pr_url;
		fi
		cd -
	done

	print_info_color_exclude "\n  3. Deleting the branch locally\n "
	for git_dir in "${all_repos_path[@]}"; do
		print_working_branch_exclude " work on $git_dir "
		cd $git_dir
		github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/'`;
		default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)
		git checkout $default_branch
		git branch -d $choosed_branch
		cd -
	done
}

get_all_remote_branch_locally() {
    set_all_repos_path_exclude
    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir
	   git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
	   git fetch --all
	   git pull --all
	   cd -
    done
}


actions() {

    option_actions=(
        "status=git status"
	   "fetch=git fetch"
	   "fetch_all=git fetch --all"
        "custom=custom"
        "push=git push"
        "pull=git pull"
        "delete_branch=git branch -d" # set the branch to delete
        "checkout=git checkout" # set the branch to checkout
    )

    array_command_key=()

    for key in "${!option_actions[@]}"; do
        command_key=$(echo "${option_actions[$key]}" | awk -F= '{print $1}')
        command=$(echo "${option_actions[$key]}" | awk -F= '{print $2}')
        array_command_key+=("$command_key")   # Add command_key to array
    done

    selected_key=$(printf '%s\n' "${array_command_key[@]}" | fzf)

    # Map the selected command key to the actual command
    selected_command=""
    for key in "${!option_actions[@]}"; do
        command_key=$(echo "${option_actions[$key]}" | awk -F= '{print $1}')
        if [ "$command_key" == "$selected_key" ]; then
            selected_command=$(echo "${option_actions[$key]}" | awk -F= '{print $2}')
            break
        fi
    done


    if [ "$selected_key" == "delete_branch" ] || [ "$selected_key" == "checkout" ]; then
        choosed_branch=$(similar_branch_fzf_exclude)
        print_info_color_exclude "Selected branch: "
        selected_command="$selected_command $choosed_branch"
        github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/'`;
        default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)
	   if [ "$choosed_branch" == "${default_branch}" ]; then
		   print_error_color_exclude "You can't delete the develop or master branch"
		   return
	   fi
    fi


    set_all_repos_path_exclude

    if [ "$selected_key" == "custom" ]; then
        echo "Enter the command you want to execute:" && read custom_command
        selected_command=$custom_command
    fi

    read -p "The following command will be executed: $selected_command confirm ? (y/n)" confirm
    	if [ -z "$confirm" ]; then
	   confirm="y"
    fi

    for git_dir in "${all_repos_path[@]}"; do
        print_info_color_exclude "Executing command on ${YELLOW} $git_dir"

        repo_dir=$(dirname "$git_dir")

        cd "$git_dir" 
        
	   # execute and print error if the command fails
	   eval "$selected_command" || print_error_color_exclude "Command failed in $git_dir"
        
        cd -
    done
}

# get programmtically and pipe all the functions of the script into fzf
get_all_functions_of_the_script_and_pipe_into_fzf_and_execute_it_exclude(){
  execute_function=$(declare -F | awk '{print $3}' | grep -v "exclude" | fzf)
  $execute_function
}

check_if_the_change_are_merged_into_the_develop_branch() {
    set_all_repos_path_exclude
    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir
	   git checkout develop
	   git pull
	   git branch --no-merged
	   cd -
    done
}

delete_current_local_and_current_remote_branch() {
    set_all_repos_path_exclude
    choosed_branch=$(similar_branch_fzf_exclude)

    if [ "$choosed_branch" == "" ]; then
	   print_error_color_exclude "No branch selected"
	   return
    fi

    if [ "$choosed_branch" == "develop" ] || [ "$choosed_branch" == "master" ] || [ "$choosed_branch" == "main" ]; then
	   print_error_color_exclude "You can't delete the develop or master branch"
	   return
    fi
    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir
	   git checkout develop
	   git branch -d $choosed_branch
	   git push origin --delete $choosed_branch
	   cd -
    done
}

go_to_default_branch(){
	set_all_repos_path_exclude
	for git_dir in "${all_repos_path[@]}"; do
		cd $git_dir
		github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/'`;
		default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)
		print_info_color_exclude "Switching to default branch $default_branch in $git_dir"
		git checkout $default_branch
		cd -
	done
}

committed_all_changes() {
    set_all_repos_path_exclude

    read -p "Enter the commit message: " commit_message
    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir
	   git status
	   git add --all
	   git commit -m "$commit_message"
	   cd -
    done
}

merge_branch_into_default_branch() {
    set_all_repos_path_exclude
    choosed_branch=$(similar_branch_fzf_exclude)
    if [ "$choosed_branch" == "" ]; then
	   print_error_color_exclude "No branch selected"
	   return
    fi

    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir
	   default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d ':' -f 2 | xargs)
	   git checkout $default_branch
	   git pull
	   git merge $choosed_branch
	   cd -
    done
}

merge_from_specified_branch_to_specified_branch() {
    set_all_repos_path_exclude
    from_branch=$(similar_branch_fzf_exclude)
    to_branch=$(similar_branch_fzf_exclude)
    if [ "$from_branch" == "" ] || [ "$to_branch" == "" ]; then
	   print_error_color_exclude "No branch selected"
	   return
    fi

    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir || print_error_color_exclude "Error in $git_dir"
	   git checkout $to_branch || print_error_color_exclude "Error in $git_dir"
	   git pull || print_error_color_exclude "Error in $git_dir"
	   # display if there is error
	   git merge $from_branch || print_error_color_exclude "Error in $git_dir"
	   cd - || print_error_color_exclude "Error in $git_dir"
    done
}

push_all_branches() {
    set_all_repos_path_exclude
    for git_dir in "${all_repos_path[@]}"; do
	   print_working_branch_exclude " work on $git_dir "
	   cd $git_dir
	   git push --all
	   cd -
    done
}

get_all_functions_of_the_script_and_pipe_into_fzf_and_execute_it_exclude

# vi:ft=sh:
