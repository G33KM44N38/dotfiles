#!/bin/bash

# Required parameters:
# @raycast.schemaVersion 1
# @raycast.title dotfiles
# @raycast.mode compact

# Optional parameters:
# @raycast.icon ðŸ¤–

# Documentation:
# @raycast.description dotfiles
# @raycast.author me

# Color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

# Emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
ARROW="${CYAN}\xE2\x96\xB6${NC}"

DOTFILES_LOG="$HOME/.dotfiles.log"
CONFIG_DIR="$HOME/.dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
IS_FIRST_RUN="$HOME/.dotfiles_run"
DOTFILES_DIR="$HOME/.dotfiles"

# _task colorizes the given argument with spacing
function _task {
    [[ -n $TASK ]] && printf "${OVERWRITE}${LGREEN} [âœ“]  ${LGREEN}${TASK}\n"
    TASK="$1"
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
    [[ ! -f $DOTFILES_LOG ]] && touch $DOTFILES_LOG
    echo "" >> $DOTFILES_LOG
    if eval "$1" >> /dev/null 2>> $DOTFILES_LOG; then
        return 0 # success
    fi
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    sed 's/^/      /' "$DOTFILES_LOG"
    printf "\n"
    exit 1
}

function _clear_task {
    TASK=""
}

function _task_done {
    printf "${OVERWRITE}${LGREEN} [âœ“]  ${LGREEN}${TASK}
"
    _clear_task
}

function _check_git_status_and_prompt_commit {
    local uncommitted_changes=$(git status --porcelain)
    local unpushed_commits=$(git rev-list @{u}..HEAD 2>/dev/null || true) # Handle no upstream branch

    if [[ -n "$uncommitted_changes" || -n "$unpushed_commits" ]]; then
        echo -e "${YELLOW}You have pending Git changes:${NC}"
        if [[ -n "$uncommitted_changes" ]]; then
            echo -e "${YELLOW}  - Uncommitted changes detected.${NC}"
        fi
        if [[ -n "$unpushed_commits" ]]; then
            echo -e "${YELLOW}  - Unpushed commits detected.${NC}"
        fi

        read -p "${CYAN}Do you want to commit and/or push these changes now? (y/N) ${NC}" -n 1 -r
        echo # Newline after read

        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if [[ -n "$uncommitted_changes" ]]; then
                _task "Staging all changes..."
                git add -A
                _task_done

                read -p "${CYAN}Enter commit message: ${NC}" commit_message
                if [[ -z "$commit_message" ]]; then
                    commit_message="Automated commit by dotfiles script"
                fi
                _task "Committing changes..."
                if git commit -m "$commit_message"; then
                    _task_done
                else
                    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}
"
                    echo -e "${RED}Commit failed. Please resolve manually.${NC}"
                    exit 1 # Exit if commit fails
                fi
            fi

            # Re-check unpushed commits after potential new commit
            unpushed_commits=$(git rev-list @{u}..HEAD 2>/dev/null || true)
            if [[ -n "$unpushed_commits" ]]; then
                read -p "${CYAN}Do you want to push these changes now? (y/N) ${NC}" -n 1 -r
                echo # Newline after read
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    _task "Pushing changes..."
                    if git push; then
                        _task_done
                    else
                        printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}
"
                        echo -e "${RED}Push failed. Please resolve manually.${NC}"
                        exit 1 # Exit if push fails
                    fi
                else
                    echo -e "${YELLOW}Skipping push.${NC}"
                fi
            else
                echo -e "${GREEN}No unpushed commits after commit.${NC}"
            fi
        else
            echo -e "${YELLOW}Skipping commit and push.${NC}"
        fi
    fi
}

set -e

# Check if Homebrew is installed
if [[ "$(uname)" == "Darwin" ]]; then
    if ! command -v brew &> /dev/null; then
        _task "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo 'export PATH="/usr/local/bin:$PATH"' >> "$HOME/.bashrc" # Changed to .bashrc
    fi

    if ! command -v ansible &> /dev/null; then
        _task "Installing Ansible..."
        _cmd "brew install ansible"
    fi
fi

# Clone or update repository
if [[ ! -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
    _cmd "git clone --quiet https://github.com/G33KM44N38/dotfiles $DOTFILES_DIR"
else
    _task "Updating repository"
    
    cd "$DOTFILES_DIR"
    if [[ -n $(git status --porcelain) ]]; then
        _task "Stashing changes..."
        _cmd "git stash"
    fi

    _check_git_status_and_prompt_commit
    _cmd "git pull --rebase --quiet"
    
    if git stash list | grep -q 'stash@{0}'; then
        _task "Applying stashed changes..."
        _cmd "git stash pop"
    fi
fi

cd "$DOTFILES_DIR"
_task "Updating Galaxy"
_cmd "ansible-galaxy install -r \"$DOTFILES_DIR/install/requirements.yml\""

_task "Running playbook"
if [[ -f $VAULT_SECRET ]]; then
    ansible-playbook --ask-become-pass --vault-password-file "$VAULT_SECRET" "$DOTFILES_DIR/install/main.yaml" "$@"
else
    ansible-playbook --ask-become-pass "$DOTFILES_DIR/install/main.yaml" "$@"
fi

if [[ ! -f "$IS_FIRST_RUN" ]]; then
    echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
    echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
    touch "$IS_FIRST_RUN"
fi

if [[ -f ~/.zshrc ]]; then # Check if file exists before removing
    rm -f ~/.zshrc
fi

_cmd "cd ~/.dotfiles/ && stow . --ignore=node_modules && ./decrypt-sensitive-files.sh"

# vi:ft=sh:
