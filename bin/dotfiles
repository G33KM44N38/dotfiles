#!/bin/bash

# Required parameters:
# @raycast.schemaVersion 1
# @raycast.title dotfiles
# @raycast.mode compact

# Optional parameters:
# @raycast.icon ðŸ¤–

# Documentation:
# @raycast.description dotfiles
# @raycast.author me

# Get script directory and load modules
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Load configuration first
source "$SCRIPT_DIR/lib/config.sh"

# Load other modules
source "$SCRIPT_DIR/lib/ui.sh"
source "$SCRIPT_DIR/lib/git.sh"
source "$SCRIPT_DIR/lib/deps.sh"

# Main execution
main() {
    set -e

    # Load configuration
    if ! load_config; then
        exit 1
    fi

    # Setup environment variables
    setup_environment

    # Ensure required directories exist
    ensure_directories

    # Validate and install dependencies
    if ! install_dependencies; then
        exit 1
    fi

    # Clone or update repository
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        if ! _clone_repository "$DOTFILES_REPO" "$DOTFILES_DIR"; then
            exit 1
        fi
    else
        if ! _update_repository "$DOTFILES_DIR"; then
            exit 1
        fi
    fi

    # Change to dotfiles directory
    cd "$DOTFILES_DIR" || exit 1

    # Update Ansible Galaxy
    if ! update_ansible_galaxy; then
        exit 1
    fi

    # Run Ansible playbook
    _task "Running Ansible playbook"
    if [[ -f "$VAULT_SECRET" ]]; then
        ansible-playbook --ask-become-pass --vault-password-file "$VAULT_SECRET" "$DOTFILES_DIR/install/main.yaml" "$@"
    else
        ansible-playbook --ask-become-pass "$DOTFILES_DIR/install/main.yaml" "$@"
    fi
    _task_done

    # First run completion message
    if [[ ! -f "$IS_FIRST_RUN" ]]; then
        _success "First run complete!"
        echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
        touch "$IS_FIRST_RUN"
    fi

    # Clean up old zshrc if it exists
    if [[ -f ~/.zshrc ]]; then
        rm -f ~/.zshrc
    fi

    # Final setup tasks
    _task "Running final setup tasks"
    if _cmd_safe "cd ~/.dotfiles/ && stow . --ignore=node_modules && ./decrypt-sensitive-files.sh" "Final setup with stow and decryption"; then
        _task_done
        _success "Dotfiles installation completed successfully!"
    else
        _error "Final setup tasks failed"
        exit 1
    fi
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "Dotfiles Setup Script"
        echo ""
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --help, -h          Show this help message"
        echo "  --config, -c        Show current configuration"
        echo "  --deps, -d          Only install dependencies"
        echo "  --validate, -v      Validate dependencies"
        echo "  --system-info, -s   Show system information"
        echo ""
        echo "Any additional arguments are passed to ansible-playbook"
        exit 0
        ;;
    --config|-c)
        load_config
        show_config
        exit 0
        ;;
    --deps|-d)
        load_config
        install_dependencies
        exit $?
        ;;
    --validate|-v)
        load_config
        validate_dependencies
        exit $?
        ;;
    --system-info|-s)
        show_system_info
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac

# vi:ft=sh: