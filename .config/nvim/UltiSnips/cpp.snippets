#class canonique

snippet test "ctest main"
# include "header.hpp"

int main(void)
{
	std::stringstream my;
	std::stringstream origine;
	$0
	std::string my_vector = my.str();
	std::string origine_vector = origine.str();
	std::cout << "Output cout: " << std::endl;
	std::cout << my_vector << std::endl;
	std::cout << origine_vector << std::endl;

	if (my_vector != origine_vector)
		return (1);
	return 0;
}
endsnippet

snippet todo "todo list"
* ------------------------ TODO ------------------------------- *
* ------------------------ ${1:name}------------------------- *
*
* - ${2:list}:
* [ ]${3: todo}:                Clear content
* ------------------------------------------------------------- *
*/

snippet TT "Templates name T"
template<typename T>
endsnippet

snippet TTN "Templates name"
template<typename ${1:parameters}>
endsnippet

snippet classTemplates "Gen: class canonique"
template<typename ${1:parameters}>
class	${2:Class name}${4:Heritage}
}{
	private:	
		${0}
	public:
		$2(void);
		$2(const $2 &$2);
		~$2(void);

		$2 &operator = (const $2 &${3:fn_class});
};
endsnippet


snippet class "Gen: class canonique"
class	${1:Class name}{
	private:	
		${0}
	public:
		$1(void);
		$1(const $1 &$1);
		~$1(void);

		$1 &operator = (const $1 &${2:fn_class});
};
endsnippet

snippet fn_can "description"
${1:Class name}::$1(void){
	/* std::cout << "Default constructor called" << std::endl; */
	return ;
}

$1::~$1(void){
	/* std::cout << "Destructor called" << std::endl; */
	return ;
}

$1::$1(const $1 &${2:name}){
	/* std::cout << "Copy constructor called" << std::endl; */
	*this = $2;
	return;
}

$1 &$1::operator = (const $1 &$2){
	if (&$2 != this)
	{
		${3:Var} = $2.$3;
	}
	return (*this);
}
endsnippet

snippet fn_can_template "description"
${1:Class name}<${4:Templates}>::$1(void){
	/* std::cout << "Default constructor called" << std::endl; */
	return ;
}

$1<$4>::~$1(void){
	/* std::cout << "Destructor called" << std::endl; */
	return ;
}

$1<$4>::$1(const $1 &${2:name}){
	/* std::cout << "Copy constructor called" << std::endl; */
	*this = $2;
	return;
}

$1<$4> &$1::operator = (const $1 &$2){
	if (&$2 != this)
	{
		${3:Var} = $2.$3;
	}
	return (*this);
}
endsnippet


snippet head "Gen: define of the header"
#ifndef ${1:filename}
# define $1

# include <iostream>

	${0}
#endif
endsnippet

snippet void0 "Gen: fonction type void with 0 args"
void	${1:fonction}(void){
	${0}
}
endsnippet

snippet void1 "Gen: fonction type void with 1 args"
void	${1:fonction}(${2:Type} ${3:Name}){
	${0}
}
endsnippet

snippet void2 "Gen: fonction type void with 2 args"
void	${1:fonction}(${2:Type} ${3:Name}, ${4:Type} ${5:Name}){
	${0}
}
endsnippet

snippet int0 "Gen: fonction type int with 0 args"
int	${1:fonction}(void){
	${0}
	return ();
}
endsnippet

snippet int1 "Gen: fonction type int with 1 args"
int	${1:fonction}(${2:Type} ${3:Name}){
	${0}
	return ();
}
endsnippet

snippet int2 "Gen: fonction type int with 2 args"
int	${1:fonction}(${2:Type} ${3:Name}, ${4:Type} ${5:Name}){
	${0}
	return ();
}
endsnippet
snippet string0 "Gen: fonction type std::string with 0 args"
std::string	${1:fonction}(void){
	${0}
	return ();
}
endsnippet

snippet string1 "Gen: fonction type std::string with 1 args"
std::string	${1:fonction}(${2:Type} ${3:Name}){
	${0}
	return ();
}
endsnippet

snippet string2 "Gen: fonction type std::string with 2 args"
std::string	${1:fonction}(${2:Type} ${3:Name}, ${4:Type} ${5:Name}){
	${0}
	return ();
}
endsnippet

snippet fn0 "Gen: fonction type ${1} with 0 args"
${1:Type}	${2:fonction}(${3}){
	${0}
}
endsnippet

snippet fn1 "Gen: fonction type ${1} with 1 args"
${1:Type}	${2:fonction}(${3:Type} ${4:Name}){
	${0}
	return ();
}
endsnippet

snippet fn2 "Gen: fonction type ${1} with 2 args"
${1:Type}	${2:fonction}(${3:Type} ${4:Name}, ${5:Type} ${6:Name}){
	${0}
	return ();
}
endsnippet

snippet fnGetter "Gen: getter"
${1:Type}	${2:ClassName}::get${3:fonction}(void)const{
	return (${4:get_var});
}
endsnippet

snippet Getter "Gen: Prototype Getter"
${1:Type}	${2:ClassName}::get${3:fonction}(void)const;
endsnippet

snippet operator<< "fonction for operator <<"
std::ostream &operator << (std::ostream &o, const ${1:ClassName} s){
	o << "info Player: " << ${2:VarName} << std::endl;
	return (o);
}
endsnippet

snippet comment "Gen: commentaire pour les fonction cpp"
/* @Brief ${1:Desciption}*/
/* @Param ${2: Param}*/
/* @Return ${3: Return}*/
endsnippet
