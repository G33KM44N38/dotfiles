snippet genSuite "generate test suite"
package $1

import (
    "testing"
    "github.com/stretchr/testify/suite"
	"github.com/stretchr/testify/assert"
)

type $2TestSuite struct {
    suite.Suite
}

func (suite *$2TestSuite) Test$3() {
    $0
}

func Test$2TestSuite(t *testing.T) {
    suite.Run(t, new($2TestSuite))
}
endsnippet

snippet tests "snippet for test in test suite"

func (suite *$1TestSuite) Test$1(){
	$0
}
endsnippet

# =====================================

snippet ts "generate a test for the suite"
func (suite *$1) Test$2(){
	$0
}
endsnippet

# =====================================

snippet ut "generate Unit test"
func  Test$1(t *testing.T){
	$0
}
endsnippet

# =====================================

snippet tss "generate a test for the suite with setup"
func (suite *$1) setupTest$2(){
	$0
}

func (suite *$1) Test$2(){
	suite.setupTest$2()
}
endsnippet

# =====================================
snippet ifer "make a if err"
if err != nil {
	$0
}

endsnippet

# =====================================
snippet ifel "if esle statement"
if $1 {
	$0
} else {

}
endsnippet



# =====================================
snippet uni "panic unimplemted"
panic("unimplemented")
endsnippet


# =====================================
snippet sf "func struct"
func (${1:structFrom}) ${2:Name}(${3:parmeter}){
	$0
}
endsnippet

# =====================================

snippet sfr "func on struct with return"
func (${1: structFrom}) ${2:Name}(${3:parmeter}) (${4:returnValue}){
	$0
}
endsnippet

# =====================================

snippet vs "Declare several variable"
var (
	$0
)
endsnippet

# =====================================

snippet rn "return nil"
return nil
endsnippet

# =====================================

snippet re "return err"
return err
endsnippet


# =====================================

snippet r "return {element}"
return $0
endsnippet



# =====================================
snippet rqn "require.Nil(t, err)"
require.Nil(t, err)
endsnippet

# =====================================
snippet ern "err!=nil"
err !=nil{}
	$0
}
require.Nil(t, err)
endsnippet

# =====================================
snippet lp "log.Println(${})"
log.Println($0)
endsnippet

# =====================================
snippet lpa "log.Println('${0}'${0})"
log.Println("$1",$1)
endsnippet
