{
  "version": 3,
  "sources": ["../src/clear-cache.tsx", "../src/utils/cache.ts"],
  "sourcesContent": ["import { closeMainWindow } from \"@raycast/api\";\n\nimport { Cache } from \"./utils/cache\";\n\nexport default async function ClearCache() {\n  closeMainWindow();\n\n  Cache.invalidateMessages();\n  Cache.invalidateAccounts();\n}\n", "import { Cache as RaycastCache, getPreferenceValues } from \"@raycast/api\";\n\nimport { Account, Message, Preferences } from \"../types\";\n\nexport enum ExpirationTime {\n  Minute = 60 * 1000,\n  Hour = 60 * Minute,\n  Day = 24 * Hour,\n  Week = 7 * Day,\n}\n\nconst preferences: Preferences = getPreferenceValues();\nconst messageLimit = preferences.messageLimit ? parseInt(preferences.messageLimit) : 10;\n\nconst isCacheExpired = (time: number, limit = ExpirationTime.Day): boolean => {\n  return Date.now() - time > limit;\n};\n\nconst accounts = new RaycastCache();\n\nconst invalidateAccounts = () => {\n  accounts.clear();\n};\n\nconst getAccounts = (): Account[] | undefined => {\n  if (accounts.has(\"accounts\")) {\n    const response = accounts.get(\"accounts\");\n    if (response) {\n      const { time, data } = JSON.parse(response);\n      if (!isCacheExpired(time)) {\n        return data;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nconst getAccount = (idOrName: string): Account | undefined => {\n  return getAccounts()?.find((x) => x.id === idOrName || x.name === idOrName);\n};\n\nconst setAccounts = (data: Account[]) => {\n  accounts.set(\"accounts\", JSON.stringify({ time: Date.now(), data: data }));\n};\n\nconst messages = new RaycastCache();\n\nconst invalidateMessages = () => {\n  messages.clear();\n};\n\nconst getMessages = (account: string, mailbox: string): Message[] => {\n  const key = `${account}-${mailbox}`;\n  if (messages.has(key)) {\n    const response = messages.get(key);\n    if (response) {\n      const { time, data } = JSON.parse(response);\n      if (!isCacheExpired(time)) {\n        return data.slice(0, messageLimit);\n      }\n    }\n  }\n\n  return [];\n};\n\nconst setMessages = (data: Message[], account: string, mailbox: string) => {\n  const key = `${account}-${mailbox}`;\n  messages.set(key, JSON.stringify({ time: Date.now(), data: data }));\n};\n\nconst addMessage = (data: Message, account: string, mailbox: string) => {\n  const currentMessages = getMessages(account, mailbox);\n  const nextMessages = [...currentMessages, data];\n\n  setMessages(nextMessages, account, mailbox);\n};\n\nconst updateMessage = (id: string, data: Message, account: string, mailbox: string) => {\n  const currentMessages = getMessages(account, mailbox);\n  const nextMessages = currentMessages.map((currentMessage) => {\n    if (currentMessage.id === id) {\n      return { ...currentMessage, ...data };\n    }\n\n    return currentMessage;\n  });\n\n  setMessages(nextMessages, account, mailbox);\n};\n\nconst deleteMessage = (id: string, account: string, mailbox: string) => {\n  const currentMessages = getMessages(account, mailbox);\n  const nextMessages = currentMessages.filter((currentMessage) => currentMessage.id !== id);\n\n  setMessages(nextMessages, account, mailbox);\n};\n\nexport const Cache = Object.freeze({\n  getAccounts,\n  setAccounts,\n  getAccount,\n  invalidateAccounts,\n  getMessages,\n  setMessages,\n  addMessage,\n  updateMessage,\n  deleteMessage,\n  invalidateMessages,\n});\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAgC,wBCAhC,IAAAC,EAA2D,wBAW3D,IAAMC,KAA2B,uBAAoB,EAC/CC,EAAeD,EAAY,aAAe,SAASA,EAAY,YAAY,EAAI,GAE/EE,EAAiB,CAACC,EAAcC,EAAQ,QACrC,KAAK,IAAI,EAAID,EAAOC,EAGvBC,EAAW,IAAI,EAAAC,MAEfC,EAAqB,IAAM,CAC/BF,EAAS,MAAM,CACjB,EAEMG,EAAc,IAA6B,CAC/C,GAAIH,EAAS,IAAI,UAAU,EAAG,CAC5B,IAAMI,EAAWJ,EAAS,IAAI,UAAU,EACxC,GAAII,EAAU,CACZ,GAAM,CAAE,KAAAN,EAAM,KAAAO,CAAK,EAAI,KAAK,MAAMD,CAAQ,EAC1C,GAAI,CAACP,EAAeC,CAAI,EACtB,OAAOO,CAEX,CACF,CAGF,EAEMC,EAAcC,GACXJ,EAAY,GAAG,KAAMK,GAAMA,EAAE,KAAOD,GAAYC,EAAE,OAASD,CAAQ,EAGtEE,EAAeJ,GAAoB,CACvCL,EAAS,IAAI,WAAY,KAAK,UAAU,CAAE,KAAM,KAAK,IAAI,EAAG,KAAMK,CAAK,CAAC,CAAC,CAC3E,EAEMK,EAAW,IAAI,EAAAT,MAEfU,EAAqB,IAAM,CAC/BD,EAAS,MAAM,CACjB,EAEME,EAAc,CAACC,EAAiBC,IAA+B,CACnE,IAAMC,EAAM,GAAGF,CAAO,IAAIC,CAAO,GACjC,GAAIJ,EAAS,IAAIK,CAAG,EAAG,CACrB,IAAMX,EAAWM,EAAS,IAAIK,CAAG,EACjC,GAAIX,EAAU,CACZ,GAAM,CAAE,KAAAN,EAAM,KAAAO,CAAK,EAAI,KAAK,MAAMD,CAAQ,EAC1C,GAAI,CAACP,EAAeC,CAAI,EACtB,OAAOO,EAAK,MAAM,EAAGT,CAAY,CAErC,CACF,CAEA,MAAO,CAAC,CACV,EAEMoB,EAAc,CAACX,EAAiBQ,EAAiBC,IAAoB,CACzE,IAAMC,EAAM,GAAGF,CAAO,IAAIC,CAAO,GACjCJ,EAAS,IAAIK,EAAK,KAAK,UAAU,CAAE,KAAM,KAAK,IAAI,EAAG,KAAMV,CAAK,CAAC,CAAC,CACpE,EAEMY,EAAa,CAACZ,EAAeQ,EAAiBC,IAAoB,CAEtE,IAAMI,EAAe,CAAC,GADEN,EAAYC,EAASC,CAAO,EACVT,CAAI,EAE9CW,EAAYE,EAAcL,EAASC,CAAO,CAC5C,EAEMK,EAAgB,CAACC,EAAYf,EAAeQ,EAAiBC,IAAoB,CAErF,IAAMI,EADkBN,EAAYC,EAASC,CAAO,EACf,IAAKO,GACpCA,EAAe,KAAOD,EACjB,CAAE,GAAGC,EAAgB,GAAGhB,CAAK,EAG/BgB,CACR,EAEDL,EAAYE,EAAcL,EAASC,CAAO,CAC5C,EAEMQ,EAAgB,CAACF,EAAYP,EAAiBC,IAAoB,CAEtE,IAAMI,EADkBN,EAAYC,EAASC,CAAO,EACf,OAAQO,GAAmBA,EAAe,KAAOD,CAAE,EAExFJ,EAAYE,EAAcL,EAASC,CAAO,CAC5C,EAEaS,EAAQ,OAAO,OAAO,CACjC,YAAApB,EACA,YAAAM,EACA,WAAAH,EACA,mBAAAJ,EACA,YAAAU,EACA,YAAAI,EACA,WAAAC,EACA,cAAAE,EACA,cAAAG,EACA,mBAAAX,CACF,CAAC,ED1GD,eAAOa,GAAoC,IACzC,mBAAgB,EAEhBC,EAAM,mBAAmB,EACzBA,EAAM,mBAAmB,CAC3B",
  "names": ["clear_cache_exports", "__export", "ClearCache", "__toCommonJS", "import_api", "import_api", "preferences", "messageLimit", "isCacheExpired", "time", "limit", "accounts", "RaycastCache", "invalidateAccounts", "getAccounts", "response", "data", "getAccount", "idOrName", "x", "setAccounts", "messages", "invalidateMessages", "getMessages", "account", "mailbox", "key", "setMessages", "addMessage", "nextMessages", "updateMessage", "id", "currentMessage", "deleteMessage", "Cache", "ClearCache", "Cache"]
}
